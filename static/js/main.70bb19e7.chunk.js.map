{"version":3,"sources":["Components/NutrientDropdown.js","Components/ValueInputs.js","Components/DisplayTable.js","App.js","index.js"],"names":["NutrientDropdown","props","useState","dropdownOpen","setDropdownOpen","ButtonDropdown","isOpen","toggle","prevState","size","DropdownToggle","caret","outline","color","selectedNutrient","DropdownMenu","DropdownItem","header","nutrients","map","nutrient","onClick","handleEvents","ValueInputs","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","type","value","minValue","onChange","handleMinValueChange","placeholder","maxValue","handleMaxValueChange","DisplayTable","foodData","food","style","name","weight","measure","ndbno","Table","responsive","scope","unit","gm","nutrient_id","App","setFoodData","errorMessage","setErrorMessage","setSelectedNutrient","nutrientQueryValue","setNutrientQueryValue","setMinValue","setMaxValue","Container","Badge","Jumbotron","Row","Col","currentTarget","textContent","selection","indexOf","assignNutrientQueryValue","number","target","Button","query","URLSearchParams","min","max","a","axios","get","res","data","message","getFoods","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAoCeA,EA5BU,SAAAC,GAAU,IAAD,EACQC,oBAAS,GADjB,mBACzBC,EADyB,KACXC,EADW,KAShC,OACE,eAACC,EAAA,EAAD,CAAgBC,OAAQH,EAAcI,OANzB,kBAAMH,GAAgB,SAAAI,GAAS,OAAKA,MAMKC,KAAK,KAA3D,UACE,cAACC,EAAA,EAAD,CAAgBC,OAAK,EAACC,SAAO,EAACC,MAAM,YAApC,SACGZ,EAAMa,mBAET,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAcC,QAAM,EAApB,gCACChB,EAAMiB,UAAUC,KAAI,SAAAC,GACnB,OACE,cAACJ,EAAA,EAAD,UACE,qBAAKK,QAASpB,EAAMqB,aAApB,SAAmCF,KADlBA,a,gCCOhBG,EA7BK,SAAAtB,GAClB,OACE,qCACE,eAACuB,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAiBC,UAAU,UAA3B,SACE,cAACC,EAAA,EAAD,0CAEF,cAACC,EAAA,EAAD,CACEC,KAAK,OACLC,MAAO7B,EAAM8B,SACbC,SAAU/B,EAAMgC,qBAChBC,YAAY,SAGhB,eAACV,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAiBC,UAAU,UAA3B,SACE,cAACC,EAAA,EAAD,0CAEF,cAACC,EAAA,EAAD,CACEC,KAAK,OACLC,MAAO7B,EAAMkC,SACbH,SAAU/B,EAAMmC,qBAChBF,YAAY,a,QCsBPG,EA1CM,SAAApC,GACnB,OAAKA,EAAMqC,SAGFrC,EAAMqC,SAASnB,KAAI,SAAAoB,GACxB,OACE,gCACE,oBAAIC,MAAO,CAAE3B,MAAO,QAApB,SAA+B0B,EAAKE,OACpC,0CACWF,EAAKG,OADhB,eACoCH,EAAKI,QADzC,YAC2D,IACxDJ,EAAKK,SAER,eAACC,EAAA,EAAD,CAAOC,YAAU,EAAjB,UACE,gCACE,+BACE,+CACA,uCACA,oCACA,kDAGJ,gCACGP,EAAKrB,UAAUC,KAAI,SAAAC,GAClB,OACE,+BACE,oBAAI2B,MAAM,MAAV,SAAiB3B,EAASA,WAC1B,+BACGA,EAASU,MADZ,IACoBV,EAAS4B,QAE7B,6BAAK5B,EAAS6B,KACd,6BAAK7B,EAAS8B,gBANP9B,EAAS8B,uBAlBlBX,EAAKK,UAJZ,M,qECkIIO,MAlIf,WAAgB,IAAD,EACmBjD,mBAAS,IAD5B,mBACNoC,EADM,KACIc,EADJ,OAE2BlD,mBAAS,IAFpC,mBAENmD,EAFM,KAEQC,EAFR,OAGOpD,mBAAS,CAC3B,qBACA,cACA,wBACA,kCACA,oBACA,UACA,gBACA,6BARKgB,EAHM,sBAamChB,mBAAS,qBAb5C,mBAaNY,EAbM,KAaYyC,EAbZ,OAcuCrD,mBAAS,MAdhD,mBAcNsD,EAdM,KAccC,EAdd,OAgBmBvD,mBAAS,KAhB5B,mBAgBN6B,EAhBM,KAgBI2B,EAhBJ,OAkBmBxD,mBAAS,OAlB5B,mBAkBNiC,EAlBM,KAkBIwB,EAlBJ,KAuEb,OACE,mCACE,eAACC,EAAA,EAAD,WACE,6BACE,cAACC,EAAA,EAAD,2CAEF,eAACC,EAAA,EAAD,WACE,+FACA,uBACA,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,cAAC,EAAD,CACElD,iBAAkBA,EAClBI,UAAWA,EACXI,aA5CO,SAAAF,GAnBnBmC,EAoBqBnC,EApBS6C,cAAcC,aAIb,SAAAC,GAC/BV,EACEvC,EAAUkD,QAAQD,EAAUF,cAAcC,cAe5CG,CAAyBjD,QA6CjB,cAAC4C,EAAA,EAAD,UACE,cAAC,EAAD,CACEjC,SAAUA,EACVE,qBA3De,SAAAqC,GAC3BZ,EAAYY,EAAOC,OAAOzC,QA2DdK,SAAUA,EACVC,qBA1De,SAAAkC,GAC3BX,EAAYW,EAAOC,OAAOzC,YA4DlB,cAACkC,EAAA,EAAD,UACE,cAACQ,EAAA,EAAD,CAAQ3D,MAAM,UAAUQ,QA/CnB,WAEf,IACMoD,EAAQ,IAAIC,gBAAgB,CAChCtD,SAAUoC,EACVmB,IAAK5C,EACL6C,IAAKzC,KAGO,uCAAG,4BAAA0C,EAAA,+EAEKC,IAAMC,IAAN,UATV,wDASU,OAAmBN,IAFxB,OAEPO,EAFO,OAGb5B,EAAY4B,EAAIC,MAChB3B,EAAgB,IAJH,gDAMbA,EAAgB,KAAM4B,SANT,yDAAH,qDASdC,IA6BU,yBAKJ,uBACA,cAACpB,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,+BACIX,GAAgBf,EAAS8C,OAAS,GAClC,6BACE,eAACvB,EAAA,EAAD,uBAAiBvB,EAAS8C,qBAOtC,+BAAO/B,GAAgB,cAAC,EAAD,CAAcf,SAAUA,MAC/C,uBAEA,8BACGe,GACC,oBAAIb,MAAO,CAAE3B,MAAO,OAApB,iF,MC3HZwE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.70bb19e7.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {\n  ButtonDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n} from 'reactstrap';\n\nconst NutrientDropdown = props => {\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n\n  // toggles dropdown\n  const toggle = () => setDropdownOpen(prevState => !prevState);\n\n  // Renders dropdown menu, mapping each nutrient to a DropdownItem component.\n  // Allows each option to call handleEvents.\n  // DropdownToggle displays from state the current selected nutrient option from dropdown.\n  return (\n    <ButtonDropdown isOpen={dropdownOpen} toggle={toggle} size=\"lg\">\n      <DropdownToggle caret outline color=\"secondary\">\n        {props.selectedNutrient}\n      </DropdownToggle>\n      <DropdownMenu>\n        <DropdownItem header>Select a nutrient </DropdownItem>\n        {props.nutrients.map(nutrient => {\n          return (\n            <DropdownItem key={nutrient}>\n              <div onClick={props.handleEvents}>{nutrient}</div>\n            </DropdownItem>\n          );\n        })}\n      </DropdownMenu>\n    </ButtonDropdown>\n  );\n};\n\nexport default NutrientDropdown;\n","import React from 'react';\nimport { InputGroup, InputGroupText, InputGroupAddon, Input } from 'reactstrap';\n\n// Renders two input boxes for user to input numbers needed for search params\nconst ValueInputs = props => {\n  return (\n    <>\n      <InputGroup>\n        <InputGroupAddon addonType=\"prepend\">\n          <InputGroupText>Minimum nutritional value</InputGroupText>\n        </InputGroupAddon>\n        <Input\n          type=\"text\"\n          value={props.minValue}\n          onChange={props.handleMinValueChange}\n          placeholder=\"0\"\n        />\n      </InputGroup>\n      <InputGroup>\n        <InputGroupAddon addonType=\"prepend\">\n          <InputGroupText>Maximum nutritional value</InputGroupText>\n        </InputGroupAddon>\n        <Input\n          type=\"text\"\n          value={props.maxValue}\n          onChange={props.handleMaxValueChange}\n          placeholder=\"0\"\n        />\n      </InputGroup>\n    </>\n  );\n};\n\nexport default ValueInputs;\n","import React from 'react';\nimport { Table } from 'reactstrap';\n\n// This component only displays if foodData is truthy, which is after the GET request response is successful.\n// Displays all data sent from backend in detailed tables.\n// Data from sent from backend is expected to be an array. map() is used to render dynamically.\nconst DisplayTable = props => {\n  if (!props.foodData) {\n    return null;\n  } else {\n    return props.foodData.map(food => {\n      return (\n        <div key={food.ndbno}>\n          <h4 style={{ color: 'blue' }}>{food.name}</h4>\n          <h5>\n            Weight: {food.weight} | Measure: {food.measure} | ndbno:{' '}\n            {food.ndbno}\n          </h5>\n          <Table responsive>\n            <thead>\n              <tr>\n                <th>Nutrient Name</th>\n                <th>Value</th>\n                <th>gm</th>\n                <th>Nutrient ID</th>\n              </tr>\n            </thead>\n            <tbody>\n              {food.nutrients.map(nutrient => {\n                return (\n                  <tr key={nutrient.nutrient_id}>\n                    <th scope=\"row\">{nutrient.nutrient}</th>\n                    <td>\n                      {nutrient.value} {nutrient.unit}\n                    </td>\n                    <td>{nutrient.gm}</td>\n                    <td>{nutrient.nutrient_id}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n        </div>\n      );\n    });\n  }\n};\n\nexport default DisplayTable;\n","import React, { useState } from 'react';\nimport NutrientDropdown from './Components/NutrientDropdown';\nimport ValueInputs from './Components/ValueInputs';\nimport DisplayTable from './Components/DisplayTable';\nimport { Container, Row, Col, Badge, Jumbotron } from 'reactstrap';\nimport { Button } from 'reactstrap';\nimport axios from 'axios';\n\nfunction App() {\n  const [foodData, setFoodData] = useState([]);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [nutrients] = useState([\n    'Alcohol, ethyl (g)',\n    'Protein (g)',\n    'Total lipid (fat) (g)',\n    'Carbohydrate, by difference (g)',\n    'Sugars, total (g)',\n    'Ash (g)',\n    'Energy (kcal)',\n    'Fiber, total dietary (g)',\n  ]);\n  const [selectedNutrient, setSelectedNutrient] = useState('Select a nutrient');\n  const [nutrientQueryValue, setNutrientQueryValue] = useState(null);\n  // assigns selectedNutrient to the nutrient selected from the dropdown menu\n  const [minValue, setMinValue] = useState('0');\n  // 716 is the max value on the foodlist\n  const [maxValue, setMaxValue] = useState('716');\n\n  // sets selectedNutrient to string of selected option from dropdown menu.\n  const handleDropdownSelect = selection => {\n    setSelectedNutrient(selection.currentTarget.textContent);\n  };\n  // when called, will assign a corresponding number to nutrientQueryValue.\n  // nutrientQueryValue will be used in the API call query string.\n  const assignNutrientQueryValue = selection => {\n    setNutrientQueryValue(\n      nutrients.indexOf(selection.currentTarget.textContent)\n    );\n  };\n  // updates state based on number inputted\n  const handleMinValueChange = number => {\n    setMinValue(number.target.value);\n  };\n  const handleMaxValueChange = number => {\n    setMaxValue(number.target.value);\n  };\n\n  // called by onClick in NutrientDropdown.js\n  // function needed to call two separate functions back to back that share the same parameter.\n  const handleEvents = nutrient => {\n    handleDropdownSelect(nutrient);\n    assignNutrientQueryValue(nutrient);\n  };\n\n  // Handles the SEARCH button onClick.\n  // compiles the URLSearchParams and sends get request to backend.\n  // Sets errorMessage to empty string\n  // **To fetch data from nutrition-backend that's locally run on localhost, uncomment line 60 & comment out line 61.\n  const onSearch = () => {\n    // const url = 'http://localhost:3001/foods?';\n    const url = 'https://blooming-lowlands-24685.herokuapp.com/foods?';\n    const query = new URLSearchParams({\n      nutrient: nutrientQueryValue,\n      min: minValue,\n      max: maxValue,\n    });\n\n    const getFoods = async () => {\n      try {\n        const res = await axios.get(`${url}${query}`);\n        setFoodData(res.data);\n        setErrorMessage('');\n      } catch (error) {\n        setErrorMessage(error.message);\n      }\n    };\n    getFoods();\n  };\n\n  return (\n    <>\n      <Container>\n        <h1>\n          <Badge>Food Nutrition Sorting App</Badge>\n        </h1>\n        <Jumbotron>\n          <h3>Search for the foods you want by nutritional values you need!</h3>\n          <br />\n          <Row>\n            <Col>\n              <NutrientDropdown\n                selectedNutrient={selectedNutrient}\n                nutrients={nutrients}\n                handleEvents={handleEvents}\n              />\n            </Col>\n            <Col>\n              <ValueInputs\n                minValue={minValue}\n                handleMinValueChange={handleMinValueChange}\n                maxValue={maxValue}\n                handleMaxValueChange={handleMaxValueChange}\n              />\n            </Col>\n            <Col>\n              <Button color=\"primary\" onClick={onSearch}>\n                SEARCH\n              </Button>\n            </Col>\n          </Row>\n          <br />\n          <Row>\n            <Col>\n              <div>\n                {!errorMessage && foodData.length > 0 && (\n                  <h5>\n                    <Badge>Results: {foodData.length}</Badge>\n                  </h5>\n                )}\n              </div>\n            </Col>\n          </Row>\n        </Jumbotron>\n        <div>{!errorMessage && <DisplayTable foodData={foodData} />}</div>\n        <br />\n        {/* This component displaying the error message only displays if errorMessage is truthy */}\n        <div>\n          {errorMessage && (\n            <h5 style={{ color: 'red' }}>\n              :( Sorry, your search yielded no results. Please try again.\n            </h5>\n          )}\n        </div>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootswatch/dist/journal/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}